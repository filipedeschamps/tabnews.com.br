#!/usr/bin/env node
const fs = require("fs");
const { exit } = require("process");
const { GiConsoleController } = require("react-icons/gi");

const rootDiaryDir = "pages/init/diary/";
const relativeDiaryDir = __dirname + "/../" + rootDiaryDir;
const mainReadmePath = __dirname + "/../README.md";
const regexMatchDiaryFiles = "[0-9]{4}-[0-9]{2}-[0-9]{2}.*.md";
var checkCmdFlag = false;
var checkWrittenFiles = 0;
const mainReadmeTags = {
  start: `<!-- autogenerated_diary_update_start
The following text was automatically generated by scripts/update-diary.js. Do NOT edit manually, everything will be overridden.
-->
## Diário

O diário deste projeto pode ser consultado em [pages/init/diary/README.md](pages/init/diary/README.md)

**Últimas atualizações!**
`,
  finish: "<!-- autogenerated_diary_update_finish -->",
};
const diaryReadmeHeader = `<!-- This file was autogenerated by scripts/update-diary.js. Do NOT edit this file manually, every changes WILL be overridden. -->

# tabnews.com.br

- Ver índice do diário (mais recentes primeiro) [aqui](./README.md)!
- Ver índice do diário por ordem cronológica [aqui](./diary-toc-chronological.md)!
- Ver diário completo (mais recentes primeiro) [aqui](./full-diary-recent-first.md)!
- Ver diário completo por ordem cronológica [aqui](./full-diary-chronological.md)!

## Índice de entradas
`;

function buildDiaryTitlesArray() {
  diaryFiles = fs
    .readdirSync(relativeDiaryDir)
    .filter((file) => file.match(regexMatchDiaryFiles));

  var diaryEntriesArray = [];
  diaryFiles.forEach((file) => {
    const data = fs.readFileSync(relativeDiaryDir + file, {
      encoding: "utf8",
      flag: "r",
    });

    // assuming each title starts with "### title"
    firstline = data.slice(data.indexOf(" ") + 1, data.indexOf("\n"));

    // remove lines starting with **Próximo capítulo:**
    var contentWithoutNextTag = data.replace(
      /\*\*Próximo capítulo:\*\*.*/g,
      ""
    );

    // The replace leaves an empty line. Remove it.
    contentWithoutNextTag = contentWithoutNextTag.substring(
      0,
      contentWithoutNextTag.lastIndexOf("\n")
    );

    diaryEntriesArray.push({
      filepath: rootDiaryDir + file,
      filename: file,
      title: firstline,
      content: contentWithoutNextTag,
    });
  });
  return diaryEntriesArray;
}

function getIndexedLinksInMarkdownArray(
  diaryEntriesArray,
  isReverse = false,
  isRelative = false
) {
  const entries = isReverse
    ? [...diaryEntriesArray].reverse()
    : diaryEntriesArray;

  return entries.map(
    (entry) =>
      "- [" +
      entry.title +
      "](" +
      (isRelative ? entry.filename : entry.filepath) +
      ")"
  );
}

function getMainReadmeText(diaryEntriesArray) {
  return [
    mainReadmeTags.start,
    // getLinkedIndexMarkdownArray(diaryEntriesArray).join("\n"),
    getIndexedLinksInMarkdownArray(diaryEntriesArray, true)
      .slice(0, 3)
      .join("\n"),
    mainReadmeTags.finish,
  ].join("\n");
}

function replaceMainReadmeText(mainReadmeText) {
  const data = fs.readFileSync(mainReadmePath, { encoding: "utf8", flag: "r" });
  var newdata = "";

  // consider only the first line of the Tag
  const startTag = mainReadmeTags.start.substr(
    0,
    mainReadmeTags.start.indexOf("\n")
  );
  var oldTextBetweenTags = startTag + "\n";

  var foundTags = false;
  data.split("\n").forEach((line) => {
    if (!foundTags) {
      if (line.startsWith(startTag)) {
        foundTags = true;
        newdata += mainReadmeText + "\n";
      } else {
        newdata += line + "\n";
      }
    } else {
      oldTextBetweenTags += line + "\n";
      if (line.startsWith(mainReadmeTags.finish)) {
        foundTags = false;
      }
    }
  });

  if (oldTextBetweenTags !== mainReadmeText + "\n") {
    checkWrittenFiles += 1;
    fs.writeFileSync(
      mainReadmePath,
      newdata.substring(0, newdata.lastIndexOf("\n")),
      { encoding: "utf8", flag: "w" }
    );
    console.log("README.md was updated");
  }
}

function updateDiaryReadmes(diaryEntriesArray) {
  diaryRecentFirstTOCData = [
    { content: diaryReadmeHeader },
    {
      content: getIndexedLinksInMarkdownArray(
        diaryEntriesArray,
        true,
        true
      ).join("\n"),
    },
  ]
    .map((e) => e.content)
    .join("\n");

  diaryChronologicalTOCData = [
    { content: diaryReadmeHeader },
    {
      content: getIndexedLinksInMarkdownArray(
        diaryEntriesArray,
        false,
        true
      ).join("\n"),
    },
  ]
    .map((e) => e.content)
    .join("\n");

  diaryRecentFirstFullData = [
    { content: diaryReadmeHeader },
    {
      content: getIndexedLinksInMarkdownArray(
        diaryEntriesArray,
        true,
        true
      ).join("\n"),
    },
    { content: "\n## Diário\n" },
    ...[...diaryEntriesArray].reverse(),
  ]
    .map((e) => e.content)
    .join("\n");

  diaryChronologicalFullData = [
    { content: diaryReadmeHeader },
    {
      content: getIndexedLinksInMarkdownArray(
        diaryEntriesArray,
        false,
        true
      ).join("\n"),
    },
    { content: "\n## Diário\n" },
    ...diaryEntriesArray,
  ]
    .map((e) => e.content)
    .join("\n");

  // Check and override files
  [
    { file: "README.md", data: diaryRecentFirstTOCData },
    { file: "diary-toc-chronological.md", data: diaryChronologicalTOCData },
    { file: "full-diary-recent-first.md", data: diaryRecentFirstFullData },
    { file: "full-diary-chronological.md", data: diaryChronologicalFullData },
  ].forEach((e) => {
    const fileCurrentContent = fs.readFileSync(relativeDiaryDir + e.file, {
      encoding: "utf8",
      flag: "r",
    });
    if (fileCurrentContent !== e.data) {
      checkWrittenFiles += 1;
      fs.writeFileSync(relativeDiaryDir + e.file, e.data, {
        encoding: "utf8",
        flag: "w",
      });
      console.log(rootDiaryDir + e.file + " was updated");
    }
  });
}

function main() {
  if (process.argv.length > 2 && process.argv[2] === "--check") {
    console.log(
      "Running in --check mode. This will fail if any file is modified"
    );
    checkCmdFlag = true;
  }
  const diaryEntriesArray = buildDiaryTitlesArray();

  replaceMainReadmeText(getMainReadmeText(diaryEntriesArray));
  updateDiaryReadmes(diaryEntriesArray);

  if (checkCmdFlag) {
    if (checkWrittenFiles > 0) {
      console.log(
        checkWrittenFiles +
          " files were modified. --check means this script has failed"
      );
    } else {
      console.log("No files were modified. --check has passed");
    }
    return checkWrittenFiles;
  }
}

process.exit(main());
